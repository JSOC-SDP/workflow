#! /bin/csh -f
# create limb darkening removed Ic record and create image set for Ic_noLD and M for range of time
# specified by first two arguments.

# set echo
# modified to only make new movie if NRT data.

set wantlow = $1
set wanthigh = $2

echo Make images for $wantlow to $wanthigh

# from here make script that can make _nrt images in standard place

set CADENCE = 15

set WF = /home/jsoc/cvs/Development/JSOC/proj/workflow
#setenv RGBDEF /home/phil/jsoc/proj/workflow/scripts/rgb.txt
setenv RGBDEF $WF/scripts/rgb.txt
#set RENDER_IMAGE = /home/jsoc/cvs/Development/JSOC/bin/linux_x86_64/render_image
set RENDER_IMAGE = /home/jeneen/cvs/JSOC/bin/linux_x86_64/render_image
set HMI_LIMBDARK = /home/jsoc/cvs/Development/JSOC/bin/linux_x86_64/hmi_limbdark

set obslist = (Ic Ic_flat M M_color)
set minlist = (20000 0.3 -1500 -1500)
set maxlist = (75000 1.2 1500 1500)
set scalinglist = (minmaxgiven minmaxgiven mag minmaxgiven)
#set colorlist = (/home/phil/apps/heat.sao /home/phil/apps/heat.sao grey /home/priya/Colormaps/For_Todd/mag.lut)
set colorlist = ($WF/apps/heat.sao $WF/apps/heat.sao grey $WF/apps/mag.lut)
set namelist = (Continuum Continuum Magnetogram Magnetogram)
set flaglist = ("" "" -c -c)

set finalimagetime = NONE

set isNRT = 1

set end_movie_t = 0

set wantlow_t = `time_convert time=$wantlow`
set wanthigh_t = `time_convert time=$wanthigh`

@ daylow = $wantlow_t / 86400
@ dayhigh = $wanthigh_t / 86400

set day = $daylow
while ($day <= $dayhigh)
  @ day_t = 86400 * $day
  @ nextday_t = $day_t + 86400
  @ last_t = $nextday_t - 45
  if ($last_t > $wanthigh_t) set last_t = $wanthigh_t
  set first_t = $day_t
  if ($first_t < $wantlow_t) set first_t = $wantlow_t
  @ cadence = $CADENCE * 60
  @ first_mod_t = $first_t - 45
  @ imglow_t = $first_mod_t / $cadence
  @ imglow_t = $imglow_t + 1
  @ first_t = $imglow_t * $cadence
  set first = `time_convert s=$first_t zone=TAI`
  @ last_mod_t = $last_t + $cadence
  @ imghigh_t = $last_mod_t / $cadence
  @ n_images = $imghigh_t - $imglow_t
  if ($n_images < 0) set n_images = 0
  if ($n_images == 0) then
    @ day = $day + 1
    continue
  endif
  set end_movie_t = $last_t
  @ n_minutes = $n_images * $CADENCE
  set QRY = '['$first'/'$n_minutes'm@'$CADENCE'm]'
  set yyyymmdd = `echo $first | sed -e 's/_.*//' -e 's/\./Q/' -e 's/\./X/'`
  set YEAR = `echo $yyyymmdd | sed -e 's/Q.*//'`
  set MON = `echo $yyyymmdd | sed -e 's/^.*Q//' -e 's/X.*//'`
  set DAY = `echo $yyyymmdd | sed -e 's/^.*X//'`

  set IMGROOT = /home/jsoc/hmi/images
  set IMGPATH = $IMGROOT/$YEAR
  if (!(-e $IMGPATH)) mkdir $IMGPATH
  set IMGPATH = $IMGPATH/$MON
  if (!(-e $IMGPATH)) mkdir $IMGPATH
  set IMGPATH = $IMGPATH/$DAY
  if (!(-e $IMGPATH)) mkdir $IMGPATH

  cd $IMGPATH

  set img = 1
  while ($img <= $#obslist)
    set obs = $obslist[$img]
    if ($obs == Ic_flat) then
      set n_source = `show_info -cq $inseries"$QRY"`  # use inseries from Ic pass through this loop
      set n_dest = `show_info -cq 'hmi.Ic_noLimbDark_45s'"$QRY"`
      if ($n_source > 0 && $n_dest < $n_source) then
        $HMI_LIMBDARK in=$inseries"$QRY" out=hmi.Ic_noLimbDark_45s -nf
      endif
      set inseries = hmi.Ic_noLimbDark_45s
    else
      if ($obs == M_color ) then
        set in_final = hmi.M_45s
        set in_nrt = hmi.M_45s_nrt
      else
        set in_final = hmi.$obs'_45s'
        set in_nrt = hmi.$obs'_45s_nrt'
      endif
      set n_final = `show_info -cq $in_final"$QRY"`
      set n_nrt = `show_info -cq $in_nrt"$QRY"`
      set inseries = $in_nrt
      if ($n_final >= $n_nrt) then
      #  if ($n_final > 0) then
        set inseries = $in_final
        set msg = ""
        set isNRT = 0
      else
        set inseries = $in_nrt
        set msg = "Quick-Look "
      endif
    endif
    echo Use $inseries for "$QRY"

set echo
    $RENDER_IMAGE n=0 $flaglist[$img] in=$inseries"$QRY" \
    pallette=$colorlist[$img] \
    min=$minlist[$img] \
    max=$maxlist[$img] \
    scaling=$scalinglist[$img] \
    scale=4,8,16,1 \
    outid=time \
    type=jpg \
    outname=$obs \
    out='| ppmlabel -color white -size {%0.75:5} -x 15 -y {%98} -text "SDO/HMI '"$msg$namelist[$img]"': {ID}" | pnmtojpeg -quality=95'
    set finalimagetime = `show_info -q $inseries"$QRY" n=-1 key=T_REC`
unset echo
    @ img = $img + 1
  end

  @ day = $day + 1
end

set exitstatus = 0

set echo
if ($finalimagetime != NONE) then
  set hhmmss = `echo $finalimagetime | sed -e 's/_TAI//' -e 's/.*_//' -e 's/://g'`
  set yyyymmdd = `echo $finalimagetime | sed -e 's/_.*//' -e 's/\./Q/' -e 's/\./X/'`
  set YEAR = `echo $yyyymmdd | sed -e 's/Q.*//'`
  set MON = `echo $yyyymmdd | sed -e 's/^.*Q//' -e 's/X.*//'`
  set DAY = `echo $yyyymmdd | sed -e 's/^.*X//'`
  set yyyymmdd = $YEAR$MON$DAY
  set LATESTLIST = $IMGROOT/image_times
  set prevd = 0
  set prevt = 0
  if (-e $LATESTLIST) then
    set prevM = `grep Time $LATESTLIST`
    set prevdt = $prevM[2]
    set prevd = `echo $prevdt | sed -e 's/_.*//'`
    set prevt = `echo $prevdt | sed -e 's/.*_//'`
  endif
  if ($yyyymmdd > $prevd || ( $yyyymmdd == $prevd && $hhmmss > $prevt) ) then
    set imagepath = http://jsoc.stanford.edu/data/hmi/images/$YEAR/$MON/$DAY
    set latest = `ls -1t $IMGROOT/$YEAR/$MON/$DAY/*'_'1k.jpg | head -1 | awk -F\/ '{print $9}' | awk -F\_ '{print $1"_"$2}'`
#    set latest = $yyyymmdd'_'$hhmmss
    echo "Time    " $latest >  $LATESTLIST
    echo '{"first":"20100501_000000","last":"'$latest'"}' > $IMGROOT/image_times.json
    set img = 1
    while ($img <= $#obslist)
      set obs = $obslist[$img]
      set latest = `ls -1t $IMGROOT/$YEAR/$MON/$DAY/*$obs'_'1k.jpg | head -1 | awk -F\/ '{print $9}' | awk -F\_ '{print $1"_"$2}'`
      echo "$obs " $imagepath/$latest"_"$obs >> $LATESTLIST
      @ img = $img + 1
    end
  endif
endif

unset echo

if ($end_movie_t > 0 && $isNRT ) then
  set end_movie = `time_convert s=$end_movie_t zone=TAI`
#  /home/jsoc/pipeline/scripts/makeIcmovie $end_movie
  /home/jsoc/cvs/Development/JSOC/proj/workflow/scripts/makeIcmovie $end_movie
  set exitstatus = $?
endif

exit $exitstatus
