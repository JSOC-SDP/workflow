#! /bin/csh -f

# optional arg is start_time
# set echo

# make movie of last days days at cadence cadence
# choices if cadence must be multiple of 15m.

if ($#argv > 0) then
  set want = $1
  set want_t = `time_convert time=$want`
  @ wantimg = $want_t / 900
  @ endtime_t = $wantimg * 900
else
  set now = `date -u +%Y.%m.%d_%H:%M:%S`
  set now_t = `time_convert time=$now`
  @ nowimg = $now_t / 900
  @ nowimg_t = $nowimg * 900
  @ endtime_t = $nowimg_t - 3600
endif

set Type = jpg
set Size = 1k
set minFileSize = 50000

set BASE = /home/jsoc/hmi/images
set WORKBASE = /home/jsoc/hmi/movies

#foreach Quant (Ic_flat M)
foreach Quant (Ic_flat M M_color)

  set THISWORK = $Quant'_movies'.$$
  set WORK = $WORKBASE/$THISWORK
  mkdir $WORK
  mkdir $WORK/frames

  # First make 2 days at 15 minutes

  @ imgtime_t = $endtime_t - 172800
  @ cadence = 15 * 60

  set i = 0
  while ($imgtime_t <= $endtime_t)
    set imgtime = `time_convert s=$imgtime_t zone=TAI`
    set yyyymmdd = `echo $imgtime | sed -e 's/_.*//' -e 's/\./Q/' -e 's/\./X/'`
    set YEAR = `echo $yyyymmdd | sed -e 's/Q.*//'`
    set MON = `echo $yyyymmdd | sed -e 's/^.*Q//' -e 's/X.*//'`
    set DAY = `echo $yyyymmdd | sed -e 's/^.*X//'`
    set yyyymmdd = $YEAR$MON$DAY
    set hhmmss = `echo $imgtime | sed -e 's/_/Q/' -e 's/.*Q//' -e 's/://g' -e 's/_TAI//'`
    set I = `printf "%04d" $i`
    set filename = $yyyymmdd'_'$hhmmss'_'$Quant'_'$Size'.'$Type
    set Imgpath = $BASE/$YEAR/$MON/$DAY
    set targpath = $WORK/frames
    set Image = $Imgpath/$filename
    if (-e $Image) then
      set FileSize=`stat --format="%s" $Image`
      if ($FileSize < $minFileSize) then
         echo Blank image detected for $Image
      else
         ln -s $Image $targpath/$I.$Type
         @ i = $i + 1
      endif
    else
      echo no frame found for $Image
    endif
    @ imgtime_t = $imgtime_t + $cadence
  end
  
#  set HERE = $cwd
  set HERE = /home/jsoc/hmi/movies/
  ls -ld $WORK/frames
  cd $WORK/frames
  
  echo Movie making place is $cwd
  
 #set echo
  
  set MOVIE = $WORK/$Quant'_2d'.mpg
  ffmpeg -qscale 5 -r 20 -b 9600 -i %04d.$Type $MOVIE 
  if ($status == 0) then
      cp $MOVIE $Imgpath
      mv $MOVIE /home/jsoc/hmi/movies/latest
  endif
  
  set MOVIE = $WORK/$Quant'_2d'.mp4
  ffmpeg -qscale 5 -r 20 -b 9600 -i %04d.$Type $MOVIE
  if ($status == 0) then
      cp $MOVIE $Imgpath
      mv $MOVIE /home/jsoc/hmi/movies/latest
  endif

set echo   
  cd $WORKBASE
  rm -rf $THISWORK

#  set 14dMOVIES = .14dmovies
#  set D14dMOVIES = /tmp/14dmovies
  set D14dMOVIES = .14dmovies
  if (!(-e $D14dMOVIES)) mkdir $D14dMOVIES

  # on even hour endtime, make longer movie also
  @ nowtime_t = $endtime_t / 3600
  @ nowhour_t = $nowtime_t * 3600
  if ($nowhour_t == $endtime_t) then
    set THISWORK = $Quant'_movies'.$$
    set WORK = $WORKBASE/$THISWORK
    mkdir $WORK
    mkdir $WORK/frames
    cd $WORK/frames
    @ fourteen = 86400 * 14
    @ nowtime_t = $endtime_t - $fourteen
    set nowtime = `time_convert zone=TAI s=$nowtime_t`
    set endtime = `time_convert zone=TAI s=$endtime_t`
#    /home/jsoc/pipeline/scripts/makeAnyMovie $nowtime $endtime 15 $Quant 1k $HERE/$14dMOVIES/$Quant"_14d.mp4"
    /home/jsoc/pipeline/scripts/makeAnyMovie $nowtime $endtime 15 $Quant 1k $HERE/$D14dMOVIES/$Quant"_14d.mp4"
    cd $WORKBASE
    rm -rf $THISWORK
  endif

end

cd $HERE
ls -l $D14dMOVIES/
   mv $D14dMOVIES/Ic_flat_14d.mp4 $D14dMOVIES/M_14d.mp4 /home/jsoc/hmi/movies/latest/
   mv $D14dMOVIES/M_color_14d.mp4 /home/jsoc/hmi/movies/latest/
   rm -rf $D14dMOVIES

